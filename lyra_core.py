import whisper
import sounddevice as sd
import numpy as np
import subprocess
from datetime import datetime
import pyttsx3

# Load Whisper model
model = whisper.load_model("small")

# Supported languages
supported_langs = {'en': 'English', 'hi': 'Hindi', 'kn': 'Kannada'}

def process_audio(audio_data, lang_choice="en"):
    result = model.transcribe(audio_data, language=lang_choice)
    return result["text"].strip()

# Text-to-speech
def speak(text):
    print("üó£Ô∏è", text)
    engine = pyttsx3.init()
    engine.setProperty('rate', 150)
    engine.say(text)
    engine.runAndWait()

# Record audio
def record_audio(duration=6, samplerate=16000):
    print("üé§ Speak now...")
    audio = sd.rec(int(duration * samplerate), samplerate=samplerate, channels=1, dtype='float32')
    sd.wait()
    return np.squeeze(audio)

# Language selection
def get_language_choice():
    print("Select language / ‡§≠‡§æ‡§∑‡§æ / ‡≤≠‡≤æ‡≤∑‡≥Ü:")
    for code, name in supported_langs.items():
        print(f"{code}: {name}")
    while True:
        choice = input("Enter language code: ").strip().lower()
        if choice in supported_langs:
            return choice
        print("Invalid. Try again.")

# Open applications
def open_app(app_name):
    apps = {
        "notepad": "notepad.exe",
        "calculator": "calc.exe",
        "paint": "mspaint.exe",
        "cmd": "cmd.exe"
    }
    if app_name in apps:
        subprocess.Popen(apps[app_name])
        speak(f"Opening {app_name}")
    else:
        speak("App not found.")

# Date & time
def tell_time():
    speak("The time is " + datetime.now().strftime("%I:%M %p"))

def tell_date():
    speak("Today's date is " + datetime.now().strftime("%B %d, %Y"))

# Greetings based on time
def greet_user(lang):
    hour = datetime.now().hour
    if lang == 'en':
        if hour < 12:
            speak("Good morning! How can I help you?")
        elif 12 <= hour < 18:
            speak("Good afternoon! How can I help you?")
        else:
            speak("Good evening! How can I help you?")

    elif lang == 'hi':
        if hour < 12:
            speak("‡§∏‡•Å‡§™‡•ç‡§∞‡§≠‡§æ‡§§! ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§ï‡•ç‡§Ø‡§æ ‡§Æ‡§¶‡§¶ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•Ä ‡§π‡•Ç‡§Å?")
        elif 12 <= hour < 18:
            speak("‡§®‡§Æ‡§∏‡•ç‡§ï‡§æ‡§∞! ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§ï‡•ç‡§Ø‡§æ ‡§Æ‡§¶‡§¶ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•Ä ‡§π‡•Ç‡§Å?")
        else:
            speak("‡§∂‡•Å‡§≠ ‡§∏‡§Ç‡§ß‡•ç‡§Ø‡§æ! ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§ï‡•ç‡§Ø‡§æ ‡§Æ‡§¶‡§¶ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•Ä ‡§π‡•Ç‡§Å?")

    elif lang == 'kn':
        if hour < 12:
            speak("‡≤∂‡≥Å‡≤≠‡≥ã‡≤¶‡≤Ø! ‡≤®‡≤æ‡≤®‡≥Å ‡≤π‡≥á‡≤ó‡≥Ü ‡≤∏‡≤π‡≤æ‡≤Ø ‡≤Æ‡≤æ‡≤°‡≤¨‡≤π‡≥Å‡≤¶‡≥Å?")
        elif 12 <= hour < 18:
            speak("‡≤®‡≤Æ‡≤∏‡≥ç‡≤ï‡≤æ‡≤∞! ‡≤®‡≤æ‡≤®‡≥Å ‡≤π‡≥á‡≤ó‡≥Ü ‡≤∏‡≤π‡≤æ‡≤Ø ‡≤Æ‡≤æ‡≤°‡≤¨‡≤π‡≥Å‡≤¶‡≥Å?")
        else:
            speak("‡≤∂‡≥Å‡≤≠ ‡≤∏‡≤Ç‡≤ú‡≥Ü! ‡≤®‡≤æ‡≤®‡≥Å ‡≤π‡≥á‡≤ó‡≥Ü ‡≤∏‡≤π‡≤æ‡≤Ø ‡≤Æ‡≤æ‡≤°‡≤¨‡≤π‡≥Å‡≤¶‡≥Å?")

# Command handling
def handle_command(text, lang):
    text = text.lower()

    # English
    if lang == 'en':
        if "time" in text:
            tell_time()
        elif "date" in text:
            tell_date()
        elif "open notepad" in text:
            open_app("notepad")
        elif "open calculator" in text:
            open_app("calculator")
        elif "hello" in text or "hi" in text:
            greet_user(lang)
        elif "bye" in text or "exit" in text:
            speak("Goodbye!")
            return False
        else:
            speak("I didn't understand that.")
    
    # Hindi
    elif lang == 'hi':
        if "‡§∏‡§Æ‡§Ø" in text:
            tell_time()
        elif "‡§§‡§æ‡§∞‡•Ä‡§ñ" in text:
            tell_date()
        elif "‡§®‡•ã‡§ü‡§™‡•à‡§°" in text:
            open_app("notepad")
        elif "‡§ï‡•à‡§≤‡§ï‡•Å‡§≤‡•á‡§ü‡§∞" in text:
            open_app("calculator")
        elif "‡§®‡§Æ‡§∏‡•ç‡§§‡•á" in text or "‡§π‡•à‡§≤‡•ã" in text:
            greet_user(lang)
        elif "‡§Ö‡§≤‡§µ‡§ø‡§¶‡§æ" in text:
            speak("‡§Ö‡§≤‡§µ‡§ø‡§¶‡§æ!")
            return False
        else:
            speak("‡§Æ‡§æ‡§´ ‡§ï‡•Ä‡§ú‡§ø‡§Ø‡•á, ‡§Æ‡•à‡§Ç ‡§∏‡§Æ‡§ù ‡§®‡§π‡•Ä‡§Ç ‡§™‡§æ‡§à‡•§")
    
    # Kannada
    elif lang == 'kn':
        if "‡≤∏‡≤Æ‡≤Ø" in text:
            tell_time()
        elif "‡≤¶‡≤ø‡≤®‡≤æ‡≤Ç‡≤ï" in text:
            tell_date()
        elif "‡≤®‡≥ã‡≤ü‡≥ç‡≤™‡≥ç‡≤Ø‡≤æ‡≤°‡≥ç" in text:
            open_app("notepad")
        elif "‡≤ï‡≥ç‡≤Ø‡≤æ‡≤≤‡≥ç‡≤ï‡≥ç‡≤Ø‡≥Å‡≤≤‡≥á‡≤ü‡≤∞‡≥ç" in text:
            open_app("calculator")
        elif "‡≤®‡≤Æ‡≤∏‡≥ç‡≤ï‡≤æ‡≤∞" in text or "‡≤π‡≤≤‡≥ã" in text:
            greet_user(lang)
        elif "‡≤µ‡≤ø‡≤¶‡≤æ‡≤Ø" in text:
            speak("‡≤µ‡≤ø‡≤¶‡≤æ‡≤Ø!")
            return False
        else:
            speak("‡≤ï‡≥ç‡≤∑‡≤Æ‡≤ø‡≤∏‡≤ø, ‡≤®‡≤®‡≤ó‡≥Ü ‡≤Ö‡≤¶‡≥Å ‡≤Ö‡≤∞‡≥ç‡≤•‡≤µ‡≤æ‡≤ó‡≤≤‡≤ø‡≤≤‡≥ç‡≤≤.")
    
    return True

# Main program
def main():
    lang_choice = get_language_choice()
    greet_user(lang_choice)  # Greet at start

    while True:
        audio = record_audio()
        result = model.transcribe(audio, language=lang_choice)
        user_text = result["text"].strip()
        print("You said:", user_text)

        if not handle_command(user_text, lang_choice):
            break

if __name__ == "__main__":
    main()
